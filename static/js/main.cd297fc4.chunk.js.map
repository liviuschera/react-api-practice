{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-robots/search-field.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","robot","name","alt","company","catchPhrase","CardList","robots","map","key","id","SearchRobots","placeholder","handleChange","type","onChange","App","useState","setRobots","searchField","setSearchField","useEffect","params","a","fetch","then","results","json","fetchedRobots","filteredRots","filter","toLowerCase","includes","getUsers","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAGaA,G,MAAO,SAAAC,GAClB,OACE,yBAAKC,UAAU,QACb,yBACEC,IAAG,+BAA0BF,EAAMG,MAAMC,KAAtC,qBACHC,IAAI,YAEN,4BAAKL,EAAMG,MAAMC,MACjB,2BAAIJ,EAAMG,MAAMG,QAAQC,gBCPjBC,G,MAAW,SAAAR,GACtB,OACE,yBAAKC,UAAU,aACZD,EAAMS,OAAOC,KAAI,SAAAP,GAChB,OAAO,kBAAC,EAAD,CAAMQ,IAAKR,EAAMS,GAAIT,MAAOA,UCN9BU,EAAe,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC1C,OACE,kBAAC,WAAD,KACE,2BAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC2DhDG,G,MA5BH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTV,EADS,KACDW,EADC,OAEsBD,mBAAS,IAF/B,mBAETE,EAFS,KAEIC,EAFJ,KAIhBC,qBAAU,WAAM,4CACd,WAAwBC,GAAxB,iBAAAC,EAAA,sEAC8BC,MAC1B,8CACAC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UAH5B,OACQC,EADR,OAIMC,EAAeD,EAAcE,QAAO,SAAA7B,GAAK,OAC3CA,EAAMC,KAAK6B,cAAcC,SAASb,EAAYY,kBAEhDb,EAAUW,GAPZ,4CADc,uBAAC,SAAD,2BAUdI,KACC,CAACd,IAIJ,OACE,yBAAKpB,UAAU,OACb,6CACA,kBAAC,EAAD,CAAca,YAAY,eAAeC,aALxB,SAAAqB,GAAK,OAAId,EAAec,EAAMC,OAAOC,UAMtD,kBAAC,EAAD,CAAU7B,OAAQA,OC/CJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.cd297fc4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = props => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img\r\n        src={`https://robohash.org/${props.robot.name}.png&size=150x150`}\r\n        alt=\"A robot\"\r\n      />\r\n      <h3>{props.robot.name}</h3>\r\n      <p>{props.robot.company.catchPhrase}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = props => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.robots.map(robot => {\r\n        return <Card key={robot.id} robot={robot}></Card>;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { Fragment } from \"react\";\r\n\r\nexport const SearchRobots = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <Fragment>\r\n      <input type=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n    </Fragment>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\n// import { render } from \"react-dom\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchRobots } from \"./components/search-robots/search-field.component\";\n// import { SearchContext } from \"./components/search-robots/search-context.component\";\nimport \"./App.css\";\n\n// class App extends React.Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       robots: []\n//     };\n//   }\n\n//   async componentDidMount() {\n//     const robots = await fetch(\n//       \"https://jsonplaceholder.typicode.com/users\"\n//     ).then(results => results.json());\n//     this.setState({ robots });\n//   }\n\n//   render() {\n//     console.log(`sear ${this.state.searchField}`);\n\n//     return (\n//       <div className=\"App\">\n//         <SearchRobots robots={this.state.robots}></SearchRobots>\n//         <CardList robots={this.state.robots}></CardList>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\nconst App = () => {\n  const [robots, setRobots] = useState([]);\n  const [searchField, setSearchField] = useState(\"\");\n\n  useEffect(() => {\n    async function getUsers(params) {\n      const fetchedRobots = await fetch(\n        \"https://jsonplaceholder.typicode.com/users\"\n      ).then(results => results.json());\n      let filteredRots = fetchedRobots.filter(robot =>\n        robot.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n      setRobots(filteredRots);\n    }\n    getUsers();\n  }, [searchField]);\n\n  const handleChange = event => setSearchField(event.target.value);\n\n  return (\n    <div className=\"App\">\n      <h1>Robo Monsters</h1>\n      <SearchRobots placeholder=\"search robot\" handleChange={handleChange} />\n      <CardList robots={robots} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}